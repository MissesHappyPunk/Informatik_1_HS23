#!/usr/bin/env python3

# The signatures of this class and its task methods are required for the automated grading to work.
# You must not change the names or the list of parameters.
# You may introduce grading/protected utility methods though.
class Publication:

    def __init__(self, authors: list, title, year):
        self.__authors: list = authors
        self.__title = title
        self.__year = year

    def __str__(self):
        return f"{__class__.__name__}({self.__authors}, \"{self.__title}\", {self.__year})".replace("\'", "\"")

    def __repr__(self):
        return f"{self}".replace("\'", "\"")

    def __hash__(self):
        return hash((tuple(self.__authors), self.__title, self.__year))

    def get_authors(self) -> list:
        return list(self.__authors)

    def get_title(self):
        return self.__title

    def get_year(self):
        return self.__year

    def __lt__(self, other):
        if not isinstance(other, Publication):
            return NotImplemented
        return self.__is_less(other)

    def __le__(self, other):
        if not isinstance(other, Publication):
            return NotImplemented
        return self.__is_less(other) or self.__is_equal(other)

    def __gt__(self, other):
        if not isinstance(other, Publication):
            return NotImplemented
        return not (self.__is_less(other) or self.__is_equal(other))

    def __ge__(self, other):
        if not isinstance(other, Publication):
            return NotImplemented
        return not self.__is_less(other)

    def __eq__(self, other):
        if not isinstance(other, Publication):
            return NotImplemented
        return self.__is_equal(other)

    def __ne__(self, other):
        if not isinstance(other, Publication):
            return NotImplemented
        return not self.__is_equal(other)

    def __is_equal(self, other):
        return self.__hash__() == other.__hash__()

    def __is_less(self, other):
        if self.get_authors() == other.get_authors():
            if self.get_title() == other.get_title():
                return self.get_year() < other.get_year()
            return self.get_title() < other.get_title()
        return self.get_authors() < other.get_authors()

# You can play around with your implementation in the body of the following 'if'.
# The contained statements will be ignored while evaluating your solution.
if __name__ == '__main__':
    references = [
        Publication(["Gamma", "Helm", "Johnson", "Vlissides"], "Design Patterns", 1994),
        Publication(["Cockburn"], "Writing Effective Use Cases", 2000),
        Publication(["Duvall", "Matyas", "Glover"], "Continuous Integration", 2007)
    ]

    p = Publication(["Duvall", "Matyas", "Glover"], "Continuous Integration", 2007)
    s = "Publication([\"Duvall\", \"Matyas\", \"Glover\"], \"Continuous Integration\", 2007)"
    print(p)
    print(str(p) == s)

    p1 = Publication(["A"], "B", 1234)
    p2 = Publication(["A"], "B", 1234)
    p3 = Publication(["B"], "C", 2345)
    print(p1 == p2)  # True
    print(p2 == p3)  # False

    sales = {
        p1: 273,
        p2: 398,
    }
